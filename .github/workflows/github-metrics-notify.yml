# .github/workflows/github-metrics-notify.yml

name: GitHub Metrics Notification

on:
  schedule:
    - cron: '0 */1 * * *' # Every hour
  workflow_dispatch: # Allows manual triggering

jobs:
  notify_metrics:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          persist-credentials: false # Ensure GITHUB_TOKEN is not passed to the subprocess
          fetch-depth: 0 # Fetch all history for accurate metric tracking

      - name: Set Up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Fetch and Compare Metrics
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
        run: |
          #!/usr/bin/env python3
          import os
          import requests
          import json

          # Configuration
          REPO_OWNER, REPO_NAME = "dagnazty", "VidBack"
          METRICS_FILE = ".github/metrics.json"

          # GitHub API Headers
          headers = {
              "Authorization": f"token {os.getenv('GITHUB_TOKEN')}",
              "Accept": "application/vnd.github.v3+json"
          }

          # Fetch current metrics
          repo_api = f"https://api.github.com/repos/{REPO_OWNER}/{REPO_NAME}"
          
          try:
              repo_response = requests.get(repo_api, headers=headers)
              repo_response.raise_for_status()
              repo_data = repo_response.json()
              stars = repo_data.get('stargazers_count', 0)
              forks = repo_data.get('forks_count', 0)
              followers = repo_data.get('subscribers_count', 0)
          except requests.exceptions.RequestException as e:
              raise SystemExit(f"Failed to fetch repository data: {e}")

          # Load previous metrics
          if os.path.exists(METRICS_FILE):
              with open(METRICS_FILE, 'r') as f:
                  prev_metrics = json.load(f)
          else:
              prev_metrics = {"stars": 0, "forks": 0, "followers": 0}

          # Determine changes
          changes = {}
          if stars > prev_metrics.get("stars", 0):
              changes["stars"] = stars - prev_metrics["stars"]
          if forks > prev_metrics.get("forks", 0):
              changes["forks"] = forks - prev_metrics["forks"]
          if followers > prev_metrics.get("followers", 0):
              changes["followers"] = followers - prev_metrics["followers"]

          # Update metrics file
          new_metrics = {"stars": stars, "forks": forks, "followers": followers}
          with open(METRICS_FILE, 'w') as f:
              json.dump(new_metrics, f)

          # Commit changes if there are updates
          if changes:
              # Configure Git
              os.system("git config user.name 'github-actions[bot]'")
              os.system("git config user.email 'github-actions[bot]@users.noreply.github.com'")
              
              # Add and commit changes
              os.system(f"git add {METRICS_FILE}")
              commit_message = f"Update metrics: {json.dumps(new_metrics)}"
              os.system(f"git commit -m '{commit_message}'")

              # Push changes
              # Use a separate GitHub token to avoid using the default one with limited permissions
              # Here, using the default GITHUB_TOKEN with `actions/checkout` set to `persist-credentials: false`
              push_url = repo_api.replace("https://api.github.com/repos/", "https://x-access-token:${GITHUB_TOKEN}@github.com/")
              os.system(f"git push {push_url} HEAD:main")  # Replace 'main' with your default branch if different

              # Prepare Discord message
              message = "**GitHub Repository Metrics Updated**\n"
              message += f"Repository: **{REPO_OWNER}/{REPO_NAME}**\n"
              for metric, count in changes.items():
                  emoji = {
                      "stars": "‚≠ê",
                      "forks": "üç¥",
                      "followers": "üë•"
                  }.get(metric, "")
                  message += f"{emoji} **{metric.capitalize()}:** +{count}\n"

              # Optionally, use embeds for richer messages
              payload = {
                  "content": message,
                  "embeds": [
                      {
                          "title": "GitHub Repository Metrics Updated",
                          "color": 15258703,
                          "fields": [
                              {"name": "Repository", "value": f"**{REPO_OWNER}/{REPO_NAME}**", "inline": False},
                          ]
                      }
                  ]
              }

              # Add metric changes to the embed
              for metric, count in changes.items():
                  emoji = {
                      "stars": "‚≠ê",
                      "forks": "üç¥",
                      "followers": "üë•"
                  }.get(metric, "")
                  payload["embeds"][0]["fields"].append({
                      "name": f"{emoji} {metric.capitalize()}",
                      "value": f"+{count}",
                      "inline": True
                  })

              # Send Discord notification
              response = requests.post(os.getenv('DISCORD_WEBHOOK_URL'), json=payload)
              if response.status_code not in [200, 204]:
                  raise SystemExit(f"Failed to send Discord notification: {response.text}")
          else:
              print("No changes in metrics.")
