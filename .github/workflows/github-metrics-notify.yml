# .github/workflows/github-metrics-notify.yml

name: GitHub Metrics Notification

# Triggers the workflow every hour and allows manual triggering
on:
  schedule:
    - cron: '0 */1 * * *' # Every hour at minute 0
  workflow_dispatch: # Allows manual triggering

jobs:
  notify_metrics:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          persist-credentials: false # Ensure GITHUB_TOKEN is not passed to the subprocess
          fetch-depth: 0 # Fetch all history for accurate metric tracking

      # Step 2: Set Up Python Environment
      - name: Set Up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x' # Specify the Python version

      # Step 3: Install Python Dependencies
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests

      # Step 4: Fetch and Compare Metrics
      - name: Fetch and Compare Metrics
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Built-in secret provided by GitHub Actions
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }} # Your Discord webhook URL
          GITHUB_EVENT_NAME: ${{ github.event_name }} # To determine if run is manual or scheduled
        run: |
          python3 - <<'EOF'
          import os
          import requests
          import json
          from datetime import datetime

          # Configuration
          REPO_OWNER = "dagnazty"       # Replace with your GitHub username
          REPO_NAME = "VidBack"         # Replace with your repository name
          METRICS_FILE = ".github/metrics.json"

          # Ensure .github directory exists
          os.makedirs(os.path.dirname(METRICS_FILE), exist_ok=True)

          # GitHub API Headers
          headers = {
              "Authorization": f"token {os.getenv('GITHUB_TOKEN')}",
              "Accept": "application/vnd.github.v3+json"
          }

          # Function to fetch closed issues count using GitHub Search API
          def fetch_closed_issues(owner, repo, headers):
              search_api = f"https://api.github.com/search/issues?q=repo:{owner}/{repo}+type:issue+state:closed"
              try:
                  response = requests.get(search_api, headers=headers)
                  response.raise_for_status()
                  data = response.json()
                  return data.get('total_count', 0)
              except requests.exceptions.RequestException as e:
                  print(f"Error fetching closed issues count: {e}")
                  return 0

          # Fetch current metrics from GitHub API
          repo_api = f"https://api.github.com/repos/{REPO_OWNER}/{REPO_NAME}"

          try:
              response = requests.get(repo_api, headers=headers)
              response.raise_for_status()
              repo_data = response.json()
              stars = repo_data.get('stargazers_count', 0)
              forks = repo_data.get('forks_count', 0)
              followers = repo_data.get('subscribers_count', 0)
              open_issues = repo_data.get('open_issues_count', 0)
              closed_issues = fetch_closed_issues(REPO_OWNER, REPO_NAME, headers)
          except requests.exceptions.RequestException as e:
              print(f"Error fetching repository data: {e}")
              exit(1)

          # Check if metrics file exists to determine if it's the initial run
          if os.path.exists(METRICS_FILE):
              with open(METRICS_FILE, 'r') as file:
                  prev_metrics = json.load(file)
              is_initial_run = False
          else:
              prev_metrics = {
                  "stars": 0,
                  "forks": 0,
                  "followers": 0,
                  "open_issues": 0,
                  "closed_issues": 0
              }
              is_initial_run = True

          # Determine changes
          changes = {}
          if stars > prev_metrics.get("stars", 0):
              changes["stars"] = stars - prev_metrics["stars"]
          if forks > prev_metrics.get("forks", 0):
              changes["forks"] = forks - prev_metrics["forks"]
          if followers > prev_metrics.get("followers", 0):
              changes["followers"] = followers - prev_metrics["followers"]
          if open_issues > prev_metrics.get("open_issues", 0):
              changes["open_issues"] = open_issues - prev_metrics["open_issues"]
          if closed_issues > prev_metrics.get("closed_issues", 0):
              changes["closed_issues"] = closed_issues - prev_metrics["closed_issues"]

          # Update metrics file
          new_metrics = {
              "stars": stars,
              "forks": forks,
              "followers": followers,
              "open_issues": open_issues,
              "closed_issues": closed_issues
          }
          with open(METRICS_FILE, 'w') as file:
              json.dump(new_metrics, file)

          # Determine if a notification should be sent
          event_name = os.getenv('GITHUB_EVENT_NAME')
          send_notification = False
          no_changes = False
          initial_setup = False

          if is_initial_run:
              if event_name == 'workflow_dispatch':
                  # Manual run: Send notification for initial setup
                  send_notification = True
                  initial_setup = True
              elif event_name == 'schedule':
                  # Scheduled run: Do not send notification on initial setup
                  send_notification = False
          else:
              if event_name == 'workflow_dispatch':
                  # Manual run: Always send notification
                  send_notification = True
                  if not changes:
                      no_changes = True
              elif event_name == 'schedule':
                  # Scheduled run: Send notification only if there are changes
                  if changes:
                      send_notification = True

          if send_notification:
              # Prepare Discord notification payload
              payload = {
                  "embeds": [
                      {
                          "title": "📈 GitHub Repository Metrics Updated",
                          "color": 0x7289DA,  # Discord blurple color
                          "thumbnail": {
                              "url": "https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png"  # GitHub logo
                          },
                          "fields": [
                              {
                                  "name": "📂 Repository",
                                  "value": f"`{REPO_OWNER}/{REPO_NAME}`",
                                  "inline": False
                              },
                              {
                                  "name": "⭐ Stars",
                                  "value": f"{stars}",
                                  "inline": True
                              },
                              {
                                  "name": "🍴 Forks",
                                  "value": f"{forks}",
                                  "inline": True
                              },
                              {
                                  "name": "👥 Followers",
                                  "value": f"{followers}",
                                  "inline": True
                              },
                              {
                                  "name": "🐛 Open Issues",
                                  "value": f"{open_issues}",
                                  "inline": True
                              },
                              {
                                  "name": "🔒 Closed Issues",
                                  "value": f"{closed_issues}",
                                  "inline": True
                              },
                          ],
                          "footer": {
                              "text": "GitHub Metrics Monitor",
                              "icon_url": "https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png"  # GitHub logo
                          },
                          "timestamp": datetime.utcnow().isoformat()  # Adds a timestamp to the embed
                      }
                  ]
              }

              if initial_setup:
                  # Add a field indicating initial setup
                  payload["embeds"][0]["fields"].append({
                      "name": "⚙️ Initial Setup",
                      "value": "Metrics tracking has been initialized.",
                      "inline": False
                  })
              elif changes:
                  # Add fields for each updated metric
                  for metric, count in changes.items():
                      emoji = {
                          "stars": "⭐",
                          "forks": "🍴",
                          "followers": "👥",
                          "open_issues": "🐛",
                          "closed_issues": "🔒"
                      }.get(metric, "")
                      change_symbol = "+" if count > 0 else ""
                      payload["embeds"][0]["fields"].append({
                          "name": f"{emoji} {metric.replace('_', ' ').capitalize()} (Change)",
                          "value": f"{change_symbol}{count}",
                          "inline": True
                      })
              elif no_changes:
                  # Indicate that there were no changes during a manual run
                  payload["embeds"][0]["fields"].append({
                      "name": "✅ No Changes",
                      "value": "No updates to metrics since the last check.",
                      "inline": False
                  })

              # Send Discord notification
              response = requests.post(os.getenv('DISCORD_WEBHOOK_URL'), json=payload)
              if response.status_code not in [200, 204]:
                  print(f"Failed to send Discord notification: {response.text}")
                  exit(1)
              else:
                  print("Discord notification sent successfully.")
          else:
              print("No changes in metrics. No notification sent.")
          EOF
